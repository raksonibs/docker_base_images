#!/bin/bash

key_path=${1:-"$HOME/.ssh/id_rsa"}

echo "
This script will install a docker-ssh-exec server container.
This allows your SSH key to be injected into docker containers in a safe and secure manor in order to facilitate installing private dependencies, deploying, etc.

It's going to use the key located at $key_path.  If you'd like to use a different key, specify a path to the key as the first parameter to this script.
"

# Start the docker-ssh-container if not already started
if docker inspect docker-ssh-exec &> /dev/null; then
  echo "Old (likely stale) docker-ssh-exec server found, removing"
  docker stop docker-ssh-exec &> /dev/null
  docker rm docker-ssh-exec &> /dev/null
fi

echo "Starting docker-ssh-exec server"

if grep -q ENCRYPTED $key_path; then
  echo -n "The key located at $key_path requires a passphrase, please enter it here: "
  read -s ssh_passphrase
  echo
fi

# In case the image is not yet downloaded, silently pull it
docker pull mdsol/docker-ssh-exec &> /dev/null

if [[ ! -z $ssh_passphrase ]]; then
  passphrase_cli_arg="-pwd $ssh_passphrase"
fi

# Start docker-ssh-exec (with passphrase, if supplied)
docker run \
  --restart always \
  -v $key_path:/root/.ssh/id_rsa \
  --name=docker-ssh-exec \
  -d mdsol/docker-ssh-exec \
  -server \
  $passphrase_cli_arg \
  &> /dev/null

echo "Container Started"

# Create the network if it does not already exist
if docker network inspect \!docker-ssh-exec &> /dev/null; then
  echo "docker-ssh-exec network already exists"
else
  docker network create \!docker-ssh-exec &> /dev/null
  echo "docker-ssh-exec network created"
fi

# Connect to the network if it's not already connected
if [[ $(docker inspect docker-ssh-exec -f '{{.NetworkSettings.Networks}}') =~ !docker-ssh-exec ]]; then
  echo "Container is already connected to the network"
else
  docker network connect \!docker-ssh-exec docker-ssh-exec
  echo "Container connected to network"
fi

echo "docker-ssh-exec is ready"
